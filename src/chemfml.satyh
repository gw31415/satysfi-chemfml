module Chemfml : sig
    direct \chem : [string;] inline-cmd
end = struct
    let-inline ctx \chem exp =

        % フォントサイズに関する定数
        let size = get-font-size ctx in
        let separator = inline-glue (size *' .5) (size *' .25) 0pt in
        let ratio = .75 in % 添え字の倍率
        let baselineshift = 0.1 in % 上下の移動

        % string -> inline-text の関数
        let embed-normal c = read-inline ctx (embed-string c) in
        let embed-sub c = read-inline (
            ctx
            |> set-font-size (size *' ratio)
            |> set-manual-rising (0pt -' (size *' baselineshift))
        ) (embed-string c) in
        let embed-upper c = read-inline (
            ctx
            |> set-font-size (size *' ratio)
            |> set-manual-rising (size *' (1. -. ratio +. baselineshift))
        ) (embed-string c) in

        % シンボルの変換
        let symbols str =
            if string-same str `+` then Some(embed-normal `+`)
            else if string-same str `-` then Some(embed-normal `-`)
            else if string-same str `->` then Some(embed-normal `→`)
            else if string-same str `<-` then Some(embed-normal `←`)
            %else if string-same str `<=>` then Some(embed-normal `⟷`)
            else None
            in

        % 分子用の変換関数
        let molecule str =
            % 文字種判別関数
            let char-ion-auto char = string-same `+` char || (string-same `-` char) in
            let char-ion-manual char = string-same `^` char in
            let char-int char = (string-match ( regexp-of-string `[0-9]` ) char) in
            let char-atom char = not (char-int char || char-ion-auto char || char-ion-manual char) in

            % モード定義
            let mode-coeff = 0 in
            let mode-atom = 1 in
            let mode-ion = 2 in

            let last-index = string-length str - 1 in
            let-rec builder origin i mode =
                % 対象にしている文字
                let char = string-sub origin i 1 in

                % モード切り替えのフェーズ
                %    普通の文字は原子モード
                if not (mode == mode-atom) && (char-atom char) then
                    builder origin i mode-atom
                %    ハット又は+-でイオン価数モード
                else if char-ion-manual char then
                    builder origin (i + 1) mode-ion
                else if not (mode == mode-ion) && (char-ion-auto char) then
                    builder origin i mode-ion
                else

                % charをインラインテキストに変換するフェーズ
                let next-inline = (
                    if mode == mode-ion then embed-upper
                        else if mode == mode-atom then (if char-int char then embed-sub else embed-normal)
                        else embed-normal
                    ) char in

                % 再帰処理のフェーズ
                if i < last-index then
                    next-inline ++ (builder origin (i + 1) mode)
                else
                    next-inline
                in

            builder str 0 0
            in

        let result =
            let-rec builder splitten =
                let converter str =
                    match (symbols str) with
                        | Some(symbol) -> symbol
                        | None -> molecule str
                    in
                match splitten with
                    | [] -> inline-skip 0mm
                    | split :: [] -> (
                            let (_, str) = split in
                            converter str
                        )
                    | split :: splitten-next ->
                        (
                            let (_, str) = split in
                            converter str
                        ) ++ separator ++ (builder splitten-next)
            in
            let splitten = split-on-regexp (regexp-of-string `\ `#) exp in
            builder splitten
            in
        script-guard Latin result
end
